{
  "openapi": "3.0.2",
  "info": {
    "title": "Barbank_2",
    "version": "1.0.0",
    "description": "Bank of bars: the force awakens\n"
  },
  "paths": {
    "/users": {
      "summary": "Path used to manage the list of users.",
      "description": "The REST endpoint/path used to list and create zero or more `user` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
      "post": {
        "requestBody": {
          "description": "A new `user` to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "User created successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Paramater missing": {
                    "value": {
                      "error": "user validation failed: (?<parameterName>[^:]+): Path `(?<parameterNameAgain>[^`]+)` is required.(, ([^:]+): Path `([^`]+)` is required.){0,2}"
                    }
                  }
                }
              }
            },
            "description": "Parameter missing"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Username already exists": {
                    "value": {
                      "error": "Username already exists"
                    }
                  }
                }
              }
            },
            "description": "Username already exists"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Incorrect paramater length": {
                    "value": {
                      "error": "Path `(?<parameterName>.+)` \\(`(?<sampleValue>.+)`\\) is (longer|shorter) than the (maximum|minimum) allowed length \\((?<requiredLength>\\d+)\\)"
                    }
                  }
                }
              }
            },
            "description": "Incorrect paramater length"
          }
        },
        "operationId": "createuser",
        "summary": "Create a user",
        "description": "Creates a new instance of a `user`."
      }
    },
    "/sessions": {
      "summary": "Path used to manage the list of sessions.",
      "description": "The REST endpoint/path used to list and create zero or more `session` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
      "post": {
        "requestBody": {
          "description": "A new `session` to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/session"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Sessions"
        ],
        "responses": {
          "201": {
            "description": "Successful response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Missing parameters": {
                    "value": {
                      "error": "Missing parameters"
                    }
                  }
                }
              }
            },
            "description": "Missing parameters"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Invalid credentials": {
                    "value": {
                      "error": "Invalid credentials"
                    }
                  }
                }
              }
            },
            "description": "Invalid credentials"
          }
        },
        "operationId": "createsession",
        "summary": "Create a session",
        "description": "Creates a new instance of a `session`."
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "responses": {
          "204": {
            "description": "Session deleted successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "No authorization header": {
                    "value": {
                      "error": "No authorization header"
                    }
                  },
                  "Invalid authorization format": {
                    "value": {
                      "error": "Invalid authorization format"
                    }
                  },
                  "Authorization header does not match MongoDB format": {
                    "value": {
                      "error": "Authorization header does not match MongoDB format"
                    }
                  }
                }
              }
            },
            "description": "Request related issues"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Invalid token": {
                    "value": {
                      "error": "Invalid token"
                    }
                  }
                }
              }
            },
            "description": "Invalid token"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Delete a session",
        "description": "Deletes given instance of `session`"
      }
    }
  },
  "components": {
    "schemas": {
      "user": {
        "title": "Root Type for user",
        "description": "",
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "example": {
          "username": "davey",
          "password": "blimp_strats",
          "name": "Dave Davey"
        }
      },
      "error": {
        "title": "Root Type for error",
        "description": "",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        },
        "example": {
          "error": "Some text"
        }
      },
      "session": {
        "title": "Root Type for session",
        "description": "",
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "example": {
          "username": "fabinator",
          "password": "qwertyqwerty"
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "tags": [
    {
      "name": "Users",
      "description": ""
    },
    {
      "name": "Sessions",
      "description": ""
    }
  ]
}